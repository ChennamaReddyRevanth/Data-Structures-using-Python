class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        self.prev=None


class DoublyLinked:
    def __init__(self):
                    self.head=None
        self.tail=None
        self.size=0
    def insert_first(self,data):
        new=Node(data)
        self.size+=1
        if self.head==None:
            self.head=new
            self.tail=self.head
        else:
            self.head.prev=new
            new.next=self.head
            self.head=new
        return new
    def deque_size(self):
        return self.size

    def insert_last(self,data):
        new=Node(data)
        self.size+=1
        if self.head==None:
            self.head=new
            self.tail=self.head
        else:
            new.prev=self.tail
            self.tail.next=new
            self.tail=new

    def delete_first(self):
        self.size-=1
        if self.head==None:
            print("Deque is Empty")
        else:
            temp=self.head
            self.head=temp.next
            self.head.prev=None
            temp.next=None
            return temp.data
            
    def delete_last(self):
        self.size-=1
        if self.head==None:
            print("Deque is Empty")
        else:
            temp=self.tail
            self.tail=self.tail.prev
            self.tail.next=None
            temp.prev=None
            return temp.data
    def __len__(self):
        return self.size
    def front(self):
        return self.head.data
    def rear(self):
        return self.tail.data
    
        

    def display(self):
        temp=self.head
        while temp!=None:
            print(temp.data,"<--",end="")
            temp=temp.next
r=DoublyLinked()
r.insert_first(10)
r.insert_last(5)
r.insert_last(6)
r.insert_first(11)
print(r.deque_size())
print(r.delete_first())
print(r.delete_last())
print(r.rear())
            
    
